"""Add research report streaming fields

Revision ID: 82233f5589d3
Revises: e91aec694a62
Create Date: 2025-10-18 22:01:13.812152

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '82233f5589d3'
down_revision: Union[str, None] = 'e91aec694a62'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_openai_usage_date', table_name='openai_usage')
    op.drop_index('idx_openai_usage_last_request', table_name='openai_usage')
    op.drop_index('idx_openai_usage_user_id', table_name='openai_usage')
    op.drop_table('openai_usage')
    op.drop_index('idx_user_api_keys_user_id', table_name='user_api_keys')
    op.drop_table('user_api_keys')
    op.drop_table('verification_tokens')
    op.drop_table('session')
    op.drop_index('idx_accounts_user_id', table_name='accounts')
    op.drop_table('accounts')
    op.drop_table('verification')
    op.drop_index('idx_pinned_stocks_position', table_name='pinned_stocks')
    op.drop_index('idx_pinned_stocks_user_id', table_name='pinned_stocks')
    op.drop_table('pinned_stocks')
    op.drop_table('account')
    op.drop_index('idx_sessions_token', table_name='sessions')
    op.drop_index('idx_sessions_user_id', table_name='sessions')
    op.drop_table('sessions')
    op.drop_table('user')
    op.add_column('research_reports', sa.Column('status', sa.String(length=20), nullable=False))
    op.add_column('research_reports', sa.Column('progress_percentage', sa.Integer(), nullable=True))
    op.add_column('research_reports', sa.Column('current_section', sa.String(length=100), nullable=True))
    op.add_column('research_reports', sa.Column('error_message', sa.Text(), nullable=True))
    op.add_column('research_reports', sa.Column('section_overview', sa.Text(), nullable=True))
    op.add_column('research_reports', sa.Column('section_financials', sa.Text(), nullable=True))
    op.add_column('research_reports', sa.Column('section_sentiment', sa.Text(), nullable=True))
    op.add_column('research_reports', sa.Column('section_risks', sa.Text(), nullable=True))
    op.add_column('research_reports', sa.Column('section_opportunities', sa.Text(), nullable=True))
    op.add_column('research_reports', sa.Column('section_recommendation', sa.Text(), nullable=True))
    op.add_column('research_reports', sa.Column('section_references', sa.Text(), nullable=True))
    op.add_column('research_reports', sa.Column('started_at', sa.DateTime(), nullable=True))
    op.add_column('research_reports', sa.Column('completed_at', sa.DateTime(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('research_reports', 'completed_at')
    op.drop_column('research_reports', 'started_at')
    op.drop_column('research_reports', 'section_references')
    op.drop_column('research_reports', 'section_recommendation')
    op.drop_column('research_reports', 'section_opportunities')
    op.drop_column('research_reports', 'section_risks')
    op.drop_column('research_reports', 'section_sentiment')
    op.drop_column('research_reports', 'section_financials')
    op.drop_column('research_reports', 'section_overview')
    op.drop_column('research_reports', 'error_message')
    op.drop_column('research_reports', 'current_section')
    op.drop_column('research_reports', 'progress_percentage')
    op.drop_column('research_reports', 'status')
    op.create_table('user',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('emailVerified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), server_default=sa.text("'user'::character varying"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sessions',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey'),
    sa.UniqueConstraint('token', name='sessions_token_key')
    )
    op.create_index('idx_sessions_user_id', 'sessions', ['user_id'], unique=False)
    op.create_index('idx_sessions_token', 'sessions', ['token'], unique=False)
    op.create_table('account',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('accountId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('providerId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('accessToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refreshToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('idToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('accessTokenExpiresAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('refreshTokenExpiresAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], name='account_userId_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='account_pkey')
    )
    op.create_table('pinned_stocks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('pinned_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('position', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='pinned_stocks_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pinned_stocks_pkey'),
    sa.UniqueConstraint('user_id', 'symbol', name='pinned_stocks_user_id_symbol_key')
    )
    op.create_index('idx_pinned_stocks_user_id', 'pinned_stocks', ['user_id'], unique=False)
    op.create_index('idx_pinned_stocks_position', 'pinned_stocks', ['user_id', 'position'], unique=False)
    op.create_table('verification',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('identifier', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='verification_pkey')
    )
    op.create_table('accounts',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('refresh_token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='accounts_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='accounts_pkey'),
    sa.UniqueConstraint('provider_id', 'account_id', name='accounts_provider_id_account_id_key')
    )
    op.create_index('idx_accounts_user_id', 'accounts', ['user_id'], unique=False)
    op.create_table('session',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], name='session_userId_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='session_pkey'),
    sa.UniqueConstraint('token', name='session_token_key')
    )
    op.create_table('verification_tokens',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('identifier', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='verification_tokens_pkey'),
    sa.UniqueConstraint('token', name='verification_tokens_token_key')
    )
    op.create_table('user_api_keys',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('encrypted_key', sa.TEXT(), autoincrement=False, nullable=False, comment='AES-256 encrypted API key'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_api_keys_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_api_keys_pkey'),
    sa.UniqueConstraint('user_id', name='user_api_keys_user_id_key'),
    comment='Stores encrypted OpenAI API keys per user'
    )
    op.create_index('idx_user_api_keys_user_id', 'user_api_keys', ['user_id'], unique=False)
    op.create_table('openai_usage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('request_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('tokens_used', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('estimated_cost', sa.NUMERIC(precision=10, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('last_request_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='openai_usage_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='openai_usage_pkey'),
    sa.UniqueConstraint('user_id', 'date', name='openai_usage_user_id_date_key'),
    comment='Tracks OpenAI API usage and estimated costs per user per day'
    )
    op.create_index('idx_openai_usage_user_id', 'openai_usage', ['user_id'], unique=False)
    op.create_index('idx_openai_usage_last_request', 'openai_usage', ['last_request_at'], unique=False)
    op.create_index('idx_openai_usage_date', 'openai_usage', ['user_id', 'date'], unique=False)
    # ### end Alembic commands ###
