"""Add AI prompt management tables

Revision ID: 59c19534dfbe
Revises: 302feb954eb2
Create Date: 2025-10-23 21:59:04.576764

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '59c19534dfbe'
down_revision: Union[str, None] = '302feb954eb2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_prompts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('prompt_type', sa.String(length=50), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('system_prompt', sa.Text(), nullable=False),
    sa.Column('user_prompt_template', sa.Text(), nullable=False),
    sa.Column('model', sa.String(length=50), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('avg_cost_per_call', sa.Float(), nullable=True),
    sa.Column('total_calls', sa.Integer(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('avg_tokens_used', sa.Integer(), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_prompts_is_active'), 'ai_prompts', ['is_active'], unique=False)
    op.create_index(op.f('ix_ai_prompts_prompt_type'), 'ai_prompts', ['prompt_type'], unique=False)
    op.create_table('post_analysis_snapshots',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.String(length=20), nullable=False),
    sa.Column('snapshot_number', sa.Integer(), nullable=False),
    sa.Column('analyzed_at', sa.DateTime(), nullable=False),
    sa.Column('stock_symbol', sa.String(length=10), nullable=True),
    sa.Column('executive_summary', sa.Text(), nullable=True),
    sa.Column('sentiment_breakdown', sa.JSON(), nullable=True),
    sa.Column('key_arguments', sa.JSON(), nullable=True),
    sa.Column('thread_quality_score', sa.Float(), nullable=True),
    sa.Column('notable_quotes', sa.JSON(), nullable=True),
    sa.Column('sentiment_shift_from_previous', sa.JSON(), nullable=True),
    sa.Column('new_themes', sa.JSON(), nullable=True),
    sa.Column('quality_trajectory', sa.String(length=20), nullable=True),
    sa.Column('comments_analyzed_in_window', sa.Integer(), nullable=True),
    sa.Column('total_comments_at_snapshot', sa.Integer(), nullable=True),
    sa.Column('previous_snapshot_id', sa.Integer(), nullable=True),
    sa.Column('strategy_used', sa.String(length=20), nullable=True),
    sa.Column('model_used', sa.String(length=50), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('processing_time_seconds', sa.Float(), nullable=True),
    sa.Column('cost_estimate', sa.Float(), nullable=True),
    sa.Column('trigger_reason', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['reddit_posts.id'], ),
    sa.ForeignKeyConstraint(['previous_snapshot_id'], ['post_analysis_snapshots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_post_analysis_snapshots_analyzed_at'), 'post_analysis_snapshots', ['analyzed_at'], unique=False)
    op.create_index(op.f('ix_post_analysis_snapshots_post_id'), 'post_analysis_snapshots', ['post_id'], unique=False)
    op.create_table('post_tracking_configs',
    sa.Column('post_id', sa.String(length=20), nullable=False),
    sa.Column('mode', sa.String(length=20), nullable=True),
    sa.Column('trigger_on_high_quality_comment', sa.Boolean(), nullable=True),
    sa.Column('quality_threshold', sa.Float(), nullable=True),
    sa.Column('trigger_on_comment_velocity', sa.Boolean(), nullable=True),
    sa.Column('velocity_threshold', sa.Integer(), nullable=True),
    sa.Column('trigger_on_sentiment_shift', sa.Boolean(), nullable=True),
    sa.Column('sentiment_shift_threshold', sa.Float(), nullable=True),
    sa.Column('min_interval_minutes', sa.Integer(), nullable=True),
    sa.Column('max_interval_hours', sa.Integer(), nullable=True),
    sa.Column('stop_after_hours', sa.Integer(), nullable=True),
    sa.Column('stop_if_no_new_comments_hours', sa.Integer(), nullable=True),
    sa.Column('last_analysis_at', sa.DateTime(), nullable=True),
    sa.Column('analysis_count', sa.Integer(), nullable=True),
    sa.Column('last_trigger_reason', sa.String(length=100), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('avg_cost_per_analysis', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['reddit_posts.id'], ),
    sa.PrimaryKeyConstraint('post_id')
    )
    op.create_index(op.f('ix_post_tracking_configs_mode'), 'post_tracking_configs', ['mode'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_post_tracking_configs_mode'), table_name='post_tracking_configs')
    op.drop_table('post_tracking_configs')
    op.drop_index(op.f('ix_post_analysis_snapshots_post_id'), table_name='post_analysis_snapshots')
    op.drop_index(op.f('ix_post_analysis_snapshots_analyzed_at'), table_name='post_analysis_snapshots')
    op.drop_table('post_analysis_snapshots')
    op.drop_index(op.f('ix_ai_prompts_prompt_type'), table_name='ai_prompts')
    op.drop_index(op.f('ix_ai_prompts_is_active'), table_name='ai_prompts')
    op.drop_table('ai_prompts')
    # ### end Alembic commands ###
